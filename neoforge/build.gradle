plugins {
    id "com.github.johnrengelman.shadow" version "8.1.1"
    id "me.shedaniel.unified-publishing" version "0.1.+"
}

architectury {
    platformSetupLoomIde()
    neoForge()
}

base {
    archivesName = "jamlib-neoforge"
}

loom {
    accessWidenerPath = project(":common").loom.accessWidenerPath
}

configurations {
    common
    shadowCommon
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentNeoForge.extendsFrom common
}

repositories {
    maven {
        name = "NeoForge"
        url = "https://maven.neoforged.net/releases/"
    }
}

dependencies {
    neoForge libs.neoforge
    modImplementation libs.architectury.neoforge
    api libs.jankson
    include libs.jankson
    forgeRuntimeLibrary libs.jankson

    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionNeoForge")) { transitive false }
}

if (System.getenv("CURSEFORGE_API_KEY") != null && System.getenv("MODRINTH_API_KEY") != null) {
    unifiedPublishing {
        project {
            displayName = "V${project.version} (NeoForge ${project.minecraft_version})"
            changelog = rootProject.file("CHANGELOG.md").text
            releaseType = project.version.contains("beta") ? "beta" : "release"
            gameVersions = [project.minecraft_version]
            gameLoaders = ["neoforge"]

            mainPublication tasks.remapJar

            relations {
                depends {
                    curseforge = "architectury-api"
                    modrinth = "architectury-api"
                }
            }


            curseforge {
                token = System.getenv("CURSEFORGE_API_KEY")
                id = "623764"
            }

            modrinth {
                token = System.getenv("MODRINTH_API_KEY")
                id = "IYY9Siz8"
            }
        }
    }
}

publishing {
    publications {
        mavenForge(MavenPublication) {
            artifactId = rootProject.archivesBaseName + "-neoforge"
            from components.java
        }
    }

    repositories {
        if (System.getenv("MAVEN_USERNAME") != null && System.getenv("MAVEN_PASSWORD") != null) {
            maven {
                url = "https://maven.jamalam.tech/releases"
                credentials {
                    username = System.getenv("MAVEN_USERNAME")
                    password = System.getenv("MAVEN_PASSWORD")
                }
            }
        }
    }
}

processResources {
    filesMatching("neoforge.mods.toml") {
        expand "minecraft_version": project.minecraft_version,
                "architectury_version": libs.versions.architectury.get()
    }

    inputs.property "minecraft_version", project.minecraft_version
    inputs.property "architectury_version", libs.versions.architectury.get()
}

shadowJar {
    exclude "fabric.mod.json"
    exclude "architectury.common.json"

    configurations = [project.configurations.shadowCommon]
    archiveClassifier = "dev-shadow"
}

remapJar {
    input.set shadowJar.archiveFile
    dependsOn shadowJar
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}
